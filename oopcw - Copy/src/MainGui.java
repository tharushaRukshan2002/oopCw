import javax.swing.*;import javax.swing.table.DefaultTableModel;import java.awt.*;import java.awt.event.ActionEvent;import java.awt.event.ActionListener;import java.text.DateFormat;import java.text.ParseException;import java.text.SimpleDateFormat;import java.util.Comparator;import java.util.Date;public class MainGui implements ActionListener {    DefaultTableModel model2, model1;    JLabel dateLabel;    JFrame frame;    JTable mainStandingsTable, randomRaceTable;    JPanel centerPanel, westPanel, randomRacePanel, racesPanel;    JTabbedPane tabbedPane;    JScrollPane tableSpMain, tableSpRandomRace;    Object[] columnNamesMain = {"Name", "Team", "Country", "Points", "1st Places", "2nd places", "3rd Places", "Total Races"};    Object[] randomRaceColumnNames = {"Position", "Name", "Team", "Country", "Points"};    Object[][] randomRaceColumnData, rowDataOfDriverStandings;    JButton randomRaceButton;    Formula1ChampionshipManager one = new Formula1ChampionshipManager();    public MainGui() {        one.loadData();        one.sort();        //printTable();        rowDataOfDriverStandings = new Object[one.getDrivers().size()][8];//row data of the main Table .        randomRaceColumnData = new Object[one.getDrivers().size()][5];//row data to the random race generator.        jTableCreation(columnNamesMain);//creating the main table.        mainFrame();        subFrames();        one.saveToFile();        frame.setVisible(true);    }    /**     * Creates the main frame to add data     */    public void mainFrame() {        frame = new JFrame("F1 Championship manager");        frame.setSize(1200, 600);        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);        ImageIcon image = new ImageIcon("logo.png");        frame.setIconImage(image.getImage());        frame.setLayout(null);        frame.setResizable(false);    }    /**     * Creates the sub panels     */    public void subFrames() {        centerPanel = new JPanel();//center panel to add tabbed pane        westPanel = new JPanel();//to add buttons west aligned panel        racesPanel = new JPanel();//adding a panel to races        randomRacePanel = new JPanel();        randomRaceButton = new JButton("Random Race");        randomRaceButton.addActionListener(this);        westPanel.setBackground(Color.red);        westPanel.setBounds(0, 0, 300, 600);        centerPanel.setBackground(Color.YELLOW);        centerPanel.setBounds(300, 0, 900, 600);        randomRacePanel.setBackground(Color.green);//random race table is in this panel        racesPanel.setBackground(Color.blue);//setting background colour to blue        frame.add(centerPanel, BorderLayout.CENTER);        centerPanel.setLayout(null);        westPanel.setLayout(null);        westPanel.add(randomRaceButton);        randomRaceButton.setBounds(5, 300, 150, 20);        randomRaceButton.setFocusable(false);        frame.add(westPanel, BorderLayout.WEST);        tabbedPane = new JTabbedPane();        tableSpMain = new JScrollPane(mainStandingsTable);//adding main table to scroll pane        tableSpMain.setVisible(true);        tabbedPane.setBounds(90, 30, 750, 500);        centerPanel.add(tabbedPane);        randomRacePanel();        mainStandingsTable.setFillsViewportHeight(true);        tabbedPane.add("Driver standings", tableSpMain);        tabbedPane.add("Random Race", randomRacePanel);        tabbedPane.add("Races", racesPanel);        one.saveToFile();    }    /**     * Adding data to 2D array to get data to rows.     */    public void addDataToArray(Object[][] rowData) {        int rowNum = model1.getRowCount();        for (int i = 0; i < rowNum; i++) {            model1.removeRow(0);        }        for (int i = 0; i < one.getDrivers().size(); i++) {            rowData[i][0] = one.getCopy().get(i).getName();            rowData[i][1] = one.getCopy().get(i).getTeam();            rowData[i][2] = one.getCopy().get(i).getCountry();            rowData[i][3] = one.getCopy().get(i).getTotalPoints();            rowData[i][4] = one.getCopy().get(i).getFirstPositions();            rowData[i][5] = one.getCopy().get(i).getSecondPositions();            rowData[i][6] = one.getCopy().get(i).getThirdPositions();            rowData[i][7] = one.getCopy().get(i).getTotalNumberOfRacers();            Object[] obj = {rowData[i][0], rowData[i][1], rowData[i][2], rowData[i][3], rowData[i][4], rowData[i][5],                    rowData[i][6], rowData[i][7]};            model1.insertRow(i, obj);        }    }    /**     * Creating the table     *     * @param columnNames to get data of names     */    public void jTableCreation(Object[] columnNames) {        model1 = new DefaultTableModel();        model1.setColumnIdentifiers(columnNames);        mainStandingsTable = new JTable(model1);        mainStandingsTable.setRowHeight(70);        mainStandingsTable.setAutoCreateRowSorter(true);        mainStandingsTable.setPreferredSize(new Dimension(720, 1000));        mainStandingsTable.getColumnModel().getColumn(0).setPreferredWidth(110);        mainStandingsTable.getColumnModel().getColumn(1).setPreferredWidth(100);        mainStandingsTable.getColumnModel().getColumn(2).setPreferredWidth(100);        mainStandingsTable.getColumnModel().getColumn(3).setPreferredWidth(70);        mainStandingsTable.getColumnModel().getColumn(4).setPreferredWidth(80);        mainStandingsTable.getColumnModel().getColumn(5).setPreferredWidth(80);        mainStandingsTable.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);        one.sort();        addDataToArray(rowDataOfDriverStandings);    }    /**     * This method generates a random race with random positions     */    public void randomRaceGenerate() throws ParseException {        Date date = uniqueRandomDateGenerator();        DateFormat dateFormat = new SimpleDateFormat("MM/dd/y");        try {            int rowNum = model2.getRowCount();            for (int i = 0; i < rowNum; i++) {                model2.removeRow(0);            }            int i = 0;            int[] positions = new int[one.getDrivers().size()];            //creating a random date            dateLabel.setText("Date: " + dateFormat.format(date));            while (i < one.getDrivers().size()) {                boolean hasMatchPosition = false;                int position = returnRandomNumber(one.getDrivers().size());                for (int k : positions) {                    if (k == position || position > one.getDrivers().size()) {                        hasMatchPosition = true;                        break;                    }                }                if (!hasMatchPosition) {                    int pointsForPos = one.getDrivers().get(i).updatePoints(position);                    //System.out.println(one.getDrivers().get(i).getTotalPoints());                    one.getRaces().add(new Race(date, one.getDrivers().get(i).getName(), position));                    one.saveToFile();                    //System.out.println(one.getDrivers().get(i).getTotalPoints());                    positions[i] = position;//adding the posistion                    randomRaceColumnData[i][0] = position;                    randomRaceColumnData[i][1] = one.getDrivers().get(i).getName();                    randomRaceColumnData[i][2] = one.getDrivers().get(i).getTeam();                    randomRaceColumnData[i][3] = one.getDrivers().get(i).getCountry();                    randomRaceColumnData[i][4] = pointsForPos;                    Object[] obj = {randomRaceColumnData[i][0], randomRaceColumnData[i][1], randomRaceColumnData[i][2],                            randomRaceColumnData[i][3], randomRaceColumnData[i][4]};                    model2.insertRow(i, obj);                    i++;                }                one.loadData();                one.sort();                addDataToArray(rowDataOfDriverStandings);            }            //jTableCreationRandomRace(randomRaceColumnData, randomRaceColumnNames);        } catch (Exception e) {            System.out.println(e);        }    }    public void randomRacePanel() {        dateLabel = new JLabel("Date:");        dateLabel.setFont(new Font("Mv boile", Font.BOLD, 20));        randomRacePanel.setLayout(null);        dateLabel.setBounds(325, -5, 200, 50);        randomRacePanel.add(dateLabel);        jTableCreationRandomRace();        tableSpRandomRace = new JScrollPane(randomRaceTable);        randomRaceTable.setRowHeight(50);        randomRacePanel.add(tableSpRandomRace);        tableSpRandomRace.setBounds(90, 40, 600, 400);        randomRaceTable.setAutoCreateRowSorter(true);        randomRaceTable.setPreferredSize(new Dimension(720, 1000));        randomRaceTable.setVisible(true);        // tableSpRandomRace.setFillsViewportHeight(true);    }    /**     * This method will return a random number between 1 and @param max     *     * @param max to get the limit     * @return Integer     */    public int returnRandomNumber(int max) {        return (int) (Math.random() * max) + 1;    }    public void jTableCreationRandomRace() {        model2 = new DefaultTableModel();        model2.setColumnIdentifiers(randomRaceColumnNames);        randomRaceTable = new JTable(model2);    }    /*public void printTable(){        DateFormat dateFormat = new SimpleDateFormat("MM/dd/y");        System.out.println("==============Before Sorting===========");        for (Race k : one.getRaces()) {            Date d1 = k.getDate();           // System.out.println(dateFormat.parse(d1));        }        one.getRaces().sort(new Comparator<Race>() {            public int compare(Race o1, Race o2) {                return o1.getDate().compareTo(o2.getDate());            }        });        System.out.println("==============After Sorting===========");        for (Race k : one.getRaces()) {            System.out.println(k.getDate());        }    }*/    @Override    public void actionPerformed(ActionEvent e) {        if (e.getSource() == randomRaceButton) {            try {                randomRaceGenerate();            } catch (ParseException ex) {                ex.printStackTrace();            }        }    }    public Date uniqueRandomDateGenerator() throws ParseException {        String date = Integer.toString(returnRandomNumber(28));        String month = Integer.toString(returnRandomNumber(12));        String stringDate = month + "/" + date + "/" + "2021";        DateFormat dateFormat = new SimpleDateFormat("MM/dd/y");        Date finalDate = dateFormat.parse(stringDate);        for (Race k : one.getRaces()){        }        return finalDate;    }}